name: Release and Publish to Crates.io

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
    - name: Run tests
      run: cargo test --all
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
    - name: Check formatting
      run: cargo fmt --all -- --check

  publish:
    needs: test
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust toolchain
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        profile: minimal
        override: true
        components: rustfmt, clippy
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    - name: Update crate versions
      run: |
        # Update all crate versions to match the tag
        sed -i 's/^version = "0.0.1"/version = "${{ steps.version.outputs.VERSION }}"/' crates/*/Cargo.toml
        sed -i 's/^version = "0.1.0"/version = "${{ steps.version.outputs.VERSION }}"/' crates/*/Cargo.toml
        # Update workspace dependency versions (format: version = "0.0.1", path = ...)
        sed -i 's/version = "0.0.1", path =/version = "${{ steps.version.outputs.VERSION }}", path =/g' crates/*/Cargo.toml
        sed -i 's/version = "0.1.0", path =/version = "${{ steps.version.outputs.VERSION }}", path =/g' crates/*/Cargo.toml
        # Update workspace dependency versions (format: , version = "0.0.1")
        sed -i 's/, version = "0.0.1"/, version = "${{ steps.version.outputs.VERSION }}"/' crates/*/Cargo.toml
        sed -i 's/, version = "0.1.0"/, version = "${{ steps.version.outputs.VERSION }}"/' crates/*/Cargo.toml
    - name: Publish agents-macros
      run: cargo publish -p agents-macros --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-macros to be available
      run: sleep 30
    - name: Publish agents-core
      run: cargo publish -p agents-core --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-core to be available
      run: sleep 30
    - name: Publish agents-toolkit
      run: cargo publish -p agents-toolkit --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-toolkit to be available
      run: sleep 30
    - name: Publish agents-persistence
      run: cargo publish -p agents-persistence --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-persistence to be available
      run: sleep 30
    - name: Publish agents-runtime
      run: cargo publish -p agents-runtime --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-runtime to be available
      run: sleep 30
    - name: Publish agents-aws
      run: cargo publish -p agents-aws --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty
    - name: Wait for agents-aws to be available
      run: sleep 30
    - name: Publish agents-sdk (unified SDK)
      run: cargo publish -p agents-sdk --token ${{ secrets.CARGO_REGISTRY_TOKEN }} --allow-dirty

  create_release:
    needs: publish
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Extract version from tag
      id: version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## What's Changed

          This release publishes version ${{ steps.version.outputs.VERSION }} of all crates to crates.io:

          - **`agents-sdk`** - ðŸŽ‰ Unified SDK with feature flags (recommended)
          - `agents-macros` - Procedural macros (`#[tool]` attribute)
          - `agents-core` - Core traits and data models
          - `agents-toolkit` - Reusable tools and utilities
          - `agents-persistence` - Database persistence (Redis, PostgreSQL)
          - `agents-runtime` - Async runtime orchestration
          - `agents-aws` - AWS integrations (DynamoDB, Secrets Manager)

          ## Recommended Installation (Unified SDK):
          ```toml
          [dependencies]
          agents-sdk = "${{ steps.version.outputs.VERSION }}"  # Includes toolkit by default

          # With AWS support:
          agents-sdk = { version = "${{ steps.version.outputs.VERSION }}", features = ["aws"] }
          
          # With Redis persistence:
          agents-sdk = { version = "${{ steps.version.outputs.VERSION }}", features = ["redis"] }
          
          # With PostgreSQL persistence:
          agents-sdk = { version = "${{ steps.version.outputs.VERSION }}", features = ["postgres"] }
          
          # All features:
          agents-sdk = { version = "${{ steps.version.outputs.VERSION }}", features = ["full"] }
          ```

          ## Individual Crates (Advanced):
          ```toml
          [dependencies]
          agents-macros = "${{ steps.version.outputs.VERSION }}"
          agents-core = "${{ steps.version.outputs.VERSION }}"
          agents-runtime = "${{ steps.version.outputs.VERSION }}"
          agents-toolkit = "${{ steps.version.outputs.VERSION }}"
          agents-persistence = { version = "${{ steps.version.outputs.VERSION }}", features = ["redis"] }
          agents-aws = "${{ steps.version.outputs.VERSION }}"
          ```